name: Build, Analyze, and Test

on:
  push:
    branches: ["main", "dev", "feature/**"]
  pull_request:
    branches: ["main", "dev"]

jobs:
  build-and-test:
    runs-on: macos-latest
    timeout-minutes: 20

    steps:
      # ------------------------------------------------------------------------
      # Setup
      # ------------------------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew update
          brew install cmake ninja llvm opencv
          echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH
          echo "/opt/homebrew/opt/llvm/libexec" >> $GITHUB_PATH
          export PATH="/opt/homebrew/opt/llvm/bin:$PATH"

      - name: Verify compiler
        run: |
          clang++ --version
          cmake --version

      # ------------------------------------------------------------------------
      # Configure & Build (Test preset)
      # ------------------------------------------------------------------------
      - name: Configure (test preset)
        run: cmake --preset test

      - name: Build (test preset)
        run: cmake --build --preset test -j$(sysctl -n hw.logicalcpu)

      # ------------------------------------------------------------------------
      # Run Tests
      # ------------------------------------------------------------------------
      - name: Run unit tests
        run: ctest --preset test --output-on-failure

      # ------------------------------------------------------------------------
      # Code Coverage (optional)
      # ------------------------------------------------------------------------
      - name: Generate coverage report
        if: success()
        run: |
          llvm-profdata merge -sparse build/test/default.profraw -o build/test/default.profdata || true
          llvm-cov show build/test/SensorTests \
            -instr-profile=build/test/default.profdata \
            -format=text > build/test/coverage.txt || true
          cat build/test/coverage.txt || true

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/test/coverage.txt

      # ------------------------------------------------------------------------
      # Static Analysis (clang-tidy)
      # ------------------------------------------------------------------------
      - name: Run clang-tidy analysis
        if: always()
        run: |
          cmake --build --preset test --target SensorLib -- -t
          clang-tidy -p build/test $(find src include -name '*.cpp') > build/reports/clang-tidy.txt || true

      - name: Upload static analysis reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis
          path: build/reports/
